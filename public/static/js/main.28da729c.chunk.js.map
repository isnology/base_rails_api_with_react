{"version":3,"sources":["api/init.js","api/token.js","api/auth.js","components/Button.js","components/SignInPage.js","components/SignedInPage.js","App.js","serviceWorker.js","index.js"],"names":["setHeaders","token","axios","defaults","headers","common","concat","create","baseURL","process","API_SERVER_URL","api","key","rememberToken","localStorage","setItem","removeItem","getValidToken","getItem","decodedToken","decodeJWT","Date","now","exp","error","getDecodedToken","validToken","extractToken","res","authorization","split","Button","_ref","colour","children","onClick","_ref$Route","Route","_ref$Display","Display","_ref$New","New","_ref$Update","Update","_ref$Delete","Delete","react_default","a","createElement","className","SignInPage","state","signUp","onFormClick","e","preventDefault","elements","target","data","user","email","value","password","_this","password_confirmation","passwordConfirmation","post","then","props","onSignInResponse","catch","test","message","Error","signIn","setState","signedIn","this","Redirect","to","react","onSubmit","type","name","defaultValue","components_Button","Component","SignedInPage","_this$props","onSignOut","App","delete","status","json","_this2","BrowserRouter","Switch","es_Route","path","exact","render","components_SignInPage","components_SignedInPage","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.28da729c.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = axios.create({\n  baseURL: process.env.API_SERVER_URL\n})\n\nexport function setHeaders(token) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n  }\n  else {\n    delete axios.defaults.headers.common['Authorization']\n  }\n}\n\nexport default api\n","import decodeJWT from 'jwt-decode'\n\nconst key = 'userToken'\n\nexport function rememberToken(token) {\n  if (token) {\n    // Remember the token\n    localStorage.setItem(key, token)\n  }\n  else {\n    // Clear the remembered token: sign out\n    localStorage.removeItem(key)\n  }\n}\n\nexport function getValidToken() {\n  const token = localStorage.getItem(key)\n  try {\n    const decodedToken = decodeJWT(token)\n    const now = Date.now() / 1000\n    // Check if token has expired\n    if (now > decodedToken.exp) {\n      return null\n    }\n    // Valid token\n    return token\n  }\n  catch (error) {\n    // Invalid token\n    return null\n  }\n}\n\nexport function getDecodedToken() {\n  const validToken = getValidToken()\n  if (validToken) {\n    return decodeJWT(validToken)\n  }\n  else {\n    return null\n  }\n}\n","import axios from 'axios'\nimport api, { setHeaders } from './init'\nimport { rememberToken, getDecodedToken, getValidToken } from './token'\n\nfunction extractToken(res) {\n  return res.headers.authorization.split(' ')[1]\n}\n\nexport function signIn(data) {\n  setHeaders(getValidToken())\n  return axios.post('api/users/sign_in', data)\n  .then((res) => {\n    rememberToken(extractToken(res))\n    return getDecodedToken()\n  })\n  .catch((error) => {\n    if (/ 401/.test(error.message)) {\n      error = new Error('The email/password combination was incorrect')\n    }\n    throw error\n  })\n}\n\nexport function signUp(data) {\n  setHeaders(getValidToken())\n  return axios.post('api/users', data)\n  .then((res) => {\n    rememberToken(extractToken(res))\n    return getDecodedToken()\n  })\n}\n\nexport function signOut() {\n  setHeaders(getValidToken())\n  return axios.delete('api/users/sign_out')\n  .then((res) => {\n    rememberToken(null)\n    return null\n  })\n}\n","import React from 'react'\n\nfunction Button({\n    children,\n    onClick,\n    Route = false,\n    Display = false,\n    New = false,\n    Update = false,\n    Delete = false\n  }) {\n\n  let colour\n  if (Route) colour = 'route'\n  else if (Display) colour = 'display'\n  else if (New) colour = 'new'\n  else if (Update) colour = 'update'\n  else if (Delete) colour = 'delete'\n  else colour = 'route'\n\n  return (\n      <button\n          className={`Button ${ colour }`}\n          onClick={ onClick }\n      >\n        { children }\n      </button>\n  )\n}\n\nexport default Button","import React, { Component, Fragment } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { signIn, signUp } from '../api/auth'\nimport Button from './Button'\n\n\nclass SignInPage extends Component {\n  state = {\n    signUp: false\n  }\n\n  onFormClick = (e) => {\n    e.preventDefault()\n    const elements = e.target.elements\n    const data = {\n      user: {\n        email: elements.email.value,\n        password: elements.password.value\n      }\n    }\n    if (this.state.signUp) {\n      data.user.password_confirmation = elements.passwordConfirmation.value\n      return signUp(data)\n      .then((res) => this.props.onSignInResponse(res))\n    }\n    else {\n      return signIn(data)\n      .then((res) => this.props.onSignInResponse(res))\n    }\n\n  }\n\n  onClick = () => {\n    this.setState({ signUp: !this.state.signUp })\n  }\n\n  render() {\n    const { signedIn } = this.props\n    const { signUp } = this.state\n\n    if (signedIn) {return <Redirect to=\"/app\" />}\n    return (\n      <Fragment>\n        <form onSubmit={this.onFormClick}>\n          <div className=\"form-label\">\n          <label>\n            {'Email: '}\n            <input\n                type='email'\n                name='email'\n                defaultValue=\"\"\n            />\n          </label>\n          </div>\n          <div className=\"form-label\">\n          <label>\n            {'Password: '}\n            <input\n                type='password'\n                name='password'\n                defaultValue=\"\"\n            />\n          </label>\n          </div>\n          { signUp &&\n            <div className=\"form-label\">\n            <label >\n              {'Re-type Password: '}\n              <input\n                  type='password'\n                  name='passwordConfirmation'\n                  defaultValue=\"\"\n              />\n            </label>\n            </div>\n          }\n          <br />\n          <Button New>Sign {signUp && 'Up'} {!signUp && 'In'}</Button>\n        </form>\n        <Button Route onClick={ this.onClick }>{signUp && 'Back to Sign In'} {!signUp && 'Sign Up'}</Button>\n      </Fragment>\n    )\n  }\n}\n\nexport default SignInPage\n","import React, { Component, Fragment } from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport Button from './Button'\n\nclass SignedInPage extends Component {\n\n  render ()\n  {\n    const { signedIn, onSignOut } = this.props\n\n    if (!signedIn) {return (<Redirect to=\"/\"/>)}\n    return (\n        <Fragment>\n          <h2>Signed in</h2>\n          <Button Delete onClick={ onSignOut }>Sign Out</Button>\n\n        </Fragment>\n    )\n  }\n}\n\nexport default SignedInPage","import React, { Component, Fragment } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport { signOut } from './api/auth'\nimport { getDecodedToken } from './api/token'\nimport  SignInPage  from './components/SignInPage'\nimport  SignedInPage  from './components/SignedInPage'\n\n\nclass App extends Component {\n  state = {\n    user: getDecodedToken()\n  }\n\n  onSignOut = () => {\n    signOut()\n    .then((res) => {\n      this.setState({ user: null })\n    })\n    .catch((error) => {\n      error.status(404).json(error)\n    })\n  }\n\n  onSignInResponse = (data) => {\n    this.setState({ user: data })\n  }\n\n  render() {\n    const { user } = this.state\n    const signedIn = !!user\n\n    return (\n      <Router>\n        <div className=\"App\">\n          <Switch>\n\n            <Route path='/' exact render={ () => (\n              <SignInPage signedIn={ signedIn } onSignInResponse={ this.onSignInResponse }/>\n            )}/>\n\n            <Route path='/app' exact render={ () => (\n              <SignedInPage signedIn={ signedIn } onSignOut={ this.onSignOut } />\n            )}/>\n\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n\n  componentWillMount() {\n\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}